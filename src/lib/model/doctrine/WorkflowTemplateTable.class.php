<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class WorkflowTemplateTable extends Doctrine_Table {
    /**
     *
     * create new instance of AdditionalText
     * @return object UserLoginTable
     */
    public static function instance() {
        return Doctrine::getTable('WorkflowTemplate');
    }


    public function getWorkflowSender() {
        return Doctrine_Query::create()
            ->select('DISTINCT wft.sender_id as id')
            ->from('WorkflowTemplate wft')
            ->where('wft.deleted_at IS NULL')
            ->andWhere('wft.isarchived = ?', 0)
            ->andWhere('wft.isstopped = ?', 0)
            ->execute();
    }


    public function archiveWorkflow($id) {
        Doctrine_Query::create()
            ->update('WorkflowTemplate wft')
            ->set('wft.isarchived','?', 1)
            ->set('wft.isstopped','?',1)
            ->set('wft.stopped_at','?', time())
            ->set('wft.archived_at','?', time())
            ->where('wft.id = ?', $id)
            ->execute();
        return true;
    }


    public function removeFromArchive($id) {
        Doctrine_Query::create()
            ->update('WorkflowTemplate wft')
            ->set('wft.isarchived','?', 0)
            ->set('wft.archived_at', 'null')
            ->set('wft.archived_by', 'null')
            ->where('wft.id = ?', $id)
            ->execute();
        return true;
    }

    

    public function getAllWorkflowTemplates($offset, $limit) {
        return Doctrine_Query::create()
            ->from('WorkflowTemplate wft')
            ->select('wft.*, wfv.id as activeversion_id,wfv.workflowisstarted as workflowisstarted,wfv.startworkflow_at as startworkflow_at, wfv.created_at as versioncreated_at, wft.iscompleted')
            ->leftJoin('wft.WorkflowVersion wfv')
            ->where('wft.deleted_at IS NULL')
            ->andWhere('wft.isarchived = ?', 0)
            ->andWhere('wfv.activeversion = ?', 1)
            ->orderBy('wft.id DESC')
            ->execute();
    }


    public function getWorkflowTemplateById($id) {
        return Doctrine_Query::create()
            ->from('WorkflowTemplate wft')
            ->select('wft.*,')
            ->where('wft.id = ?' ,$id)
            ->execute();
    }

    public function updateEndaction($id, $reason) {
        Doctrine_Query::create()
            ->update('WorkflowTemplate wft')
            ->set('wft.endaction','?', $reason)
            ->where('wft.id = ?', $id)
            ->execute();
        return true;
    }

    public function getWorkflowTemplateByVersionId($id) {
        return Doctrine_Query::create()
            ->from('WorkflowTemplate wft')
            ->select('wft.*,')
            ->leftJoin('wft.WorkflowVersion wv')
            ->where('wv.id = ?' ,$id)
            ->execute();
    }


    public function deleteWorkflow($id) {
        Doctrine_Query::create()
            ->update('WorkflowTemplate wft')
            ->set('wft.deleted_at','?', time())
            ->where('wft.id = ?', $id)
            ->execute();
        return true;
    }


    public function stopWorkflow($id, $user_id) {
        Doctrine_Query::create()
            ->update('WorkflowTemplate wft')
            ->set('wft.isstopped','?',1)
            ->set('wft.stopped_at','?', time())
            ->set('wft.stopped_by','?', $user_id)
            ->where('wft.id = ?', $id)
            ->execute();
        return true;
        
    }


    public function deleteAndStopWorkflow($user_id, $id) {
       Doctrine_Query::create()
            ->update('WorkflowTemplate wft')
            ->set('wft.isstopped','?',1)
            ->set('wft.stopped_at','?', time())
            ->set('wft.stopped_by','?', $user_id)
            ->set('wft.deleted_at','?', time())
            ->where('wft.id = ?', $id)
            ->execute();
        return true;
    }


    public function archiveAndStopWorkflow($user_id, $id) {
         Doctrine_Query::create()
            ->update('WorkflowTemplate wft')
            ->set('wft.isstopped','?',1)
            ->set('wft.stopped_at','?', time())
            ->set('wft.stopped_by','?', $user_id)
            ->set('wft.isarchived','?', 1)
            ->set('wft.archived_at','?', time())
            ->set('wft.archived_by','?', $user_id)
            ->where('wft.id = ?', $id)
            ->execute();
        return true;
    }

    public function setWorkflowFinished($id) {
        Doctrine_Query::create()
            ->update('WorkflowTemplate wft')
            ->set('wft.iscompleted','?',1)
            ->set('wft.completed_at','?', time())
            ->where('wft.id = ?', $id)
            ->execute();
        return true;
        
    }


    public function getAllToDoWorkflowTemplates($offset, $limit, $user_id) {
        return Doctrine_Query::create()
            ->from('WorkflowTemplate wft')
            ->select('wft.*, wfv.id as activeversion_id,wfv.workflowisstarted as workflowisstarted,wfv.startworkflow_at as startworkflow_at, wfv.created_at as versioncreated_at, wft.iscompleted')
            ->leftJoin('wft.WorkflowVersion wfv')
            ->leftJoin('wfv.WorkflowSlot wfs')
            ->leftJoin('wfs.WorkflowProcess wfp')
            ->leftJoin('wfp.WorkflowProcessUser wfpu')
            ->where('wft.deleted_at IS NULL')
            ->andWhere('wft.isarchived = ?', 0)
            ->andWhere('wft.isstopped = ?', 0)
            ->andWhere('wfv.activeversion = ?', 1)
            ->andWhere('wfv.workflowisstarted = ?', 1)
            ->andWhere('wfpu.user_id = ?', $user_id)
            ->andWhere('wfpu.decissionstate = ?', 'WAITING')
            ->orderBy('wft.id DESC')
            ->execute();
    }


    public function getArchivedWorkflowTemplates($offset, $limit, $user_id) {
        return Doctrine_Query::create()
            ->from('WorkflowTemplate wft')
            ->select('wft.*, wfv.id as activeversion_id,wfv.workflowisstarted as workflowisstarted,wfv.startworkflow_at as startworkflow_at, wfv.created_at as versioncreated_at, wft.iscompleted')
            ->leftJoin('wft.WorkflowVersion wfv')
            ->leftJoin('wfv.WorkflowSlot wfs')
            ->leftJoin('wfs.WorkflowProcess wfp')
            ->leftJoin('wfp.WorkflowProcessUser wfpu')
            ->where('wft.deleted_at IS NULL')
            ->andWhere('wft.isarchived = ?', 1)
            ->andWhere('wft.isstopped = ?', 1)
            ->andWhere('wfv.activeversion = ?', 1)
            ->andWhere('wfv.workflowisstarted = ?', 1)
            ->orderBy('wft.id DESC')
            ->execute();
    }

    public function restartWorkflow($id) {
        Doctrine_Query::create()
            ->update('WorkflowTemplate wft')
            ->set('wft.stopped_at','?','')
            ->set('wft.stopped_by','?', '')
            ->set('wft.isstopped','?', 0)
            ->where('wft.id = ?', $id)
            ->execute();
        
    }

    public function getAllRunningWorkflows() {
        return Doctrine_Query::create()
            ->from('WorkflowTemplate wft')
            ->select('wft.*, wfv.id')
            ->leftJoin('wft.WorkflowVersion wfv')
            ->where('wft.isstopped = ?', 0)
            ->andWhere('wft.iscompleted = ?', 0)
            ->andWhere('wft.isarchived = ?', 0)
            ->andWhere('wft.deleted_at IS NULL')
            ->andWhere('wfv.activeversion = ?', 1)
            ->andWhere('wfv.workflowisstarted = ?', 1)
            ->execute();
    }



}